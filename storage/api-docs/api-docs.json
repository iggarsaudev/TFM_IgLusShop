{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation",
        "description": "Structure of Iglu's Shop API functions",
        "version": "1.0.0"
    },
    "paths": {
        "/api/user": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get the authenticated user",
                "description": "Gets the authenticated user",
                "operationId": "36387f01cad8ad0c46daaf87bc518ce8",
                "responses": {
                    "200": {
                        "description": "Authenticated user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Register a new user",
                "operationId": "8e4e3cb7b46126f4696379d3c7eeb4ad",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Ignacio"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "ejemplo@correo.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully registered user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully registered user"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The email is already registered"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login a user",
                "description": "Login",
                "operationId": "222b2625838e3c57e017987f73598fda",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "ejemplo@correo.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successful login"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "1|abc123..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout the authenticated user",
                "description": "Logout",
                "operationId": "ad65cbbd4e9f201619eae184a5961a98",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully logged out"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Order List",
                "description": "Returns a list of all orders registered in the database.\n\nRequires authentication.\n\nIf you are the admin role, it will display all orders. If you are a user, it will only display your own orders.\n\nThis function retrieves all records from the Order model and returns them in JSON format. Each order includes the user_id, date, status, and total.",
                "operationId": "955bb77a45ae173a485fadb8befed93f",
                "responses": {
                    "200": {
                        "description": "Order List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create new order",
                "description": "Creates a new order with the provided data.\n\nRequires authentication.\n\nValidates required fields before storing the resource.\nReturns the created user ID and a confirmation message if the operation is successful.",
                "operationId": "2123ba58dadb22bd6f2c8081af562230",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrderRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Show order",
                "description": "Returns data for a specific order.\n\nRequires authentication.\n\nIf you are the admin role, you will be able to access all orders; if you are a user, you will only access your own orders.\n\nSearches for the order by its ID. If it is not found, an error is returned.",
                "operationId": "88d27387b1e409e075c18609d4a0c300",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel order",
                "description": "Cancel an order by its ID.\n\nRequires authentication.\n\nIf you are the admin role, you can cancel any order. If you are a user, you will only cancel your own orders.\n\nIf the order doesn't exist, a 404 error is returned.\nIf the order is canceled successfully, a 204 code is returned.",
                "operationId": "bab875a1ed962fb33565ab9b48c0d494",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully cancelled"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders/{id}/status": {
            "patch": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "description": "Updates the data of an existing order.\n\nRequires authentication.\n\nIf you are an admin role, you can update all orders; if you are a user, you will only update your orders.\n\nAllows you to update the order status.\nReturns the updated order if everything is correct.",
                "operationId": "6171b061f04a36658d9bca106ece32b5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrderStatusRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/outlet": {
            "get": {
                "tags": [
                    "Outlet"
                ],
                "summary": "Get all products with a discount",
                "description": "Returns a list of all the products with discount.\n\nThis is a public endpoint .\n\nThis function retrieves all products with a discount from the\nProduct model and returns them in JSON format. Each product includes\nid, name, description, price, stock, image, has_discount, discount, provider_id, category_id, created_at, and updated_at.\nid, name, description, price, stock, image,has_discount,discount,provider_id,category_id,created_at,updated_at.",
                "operationId": "955d73daad4a3e784296234cb13fc5d8",
                "responses": {
                    "200": {
                        "description": "List of products with discount (public endpoint, does not require authentication).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Outlet"
                ],
                "summary": "Creates a new product from outlet",
                "description": "Creates a new product from outlet.\n\nRequires authentication and administrator permissions.\n\nWhen creating a new product, the following fields are required:\n\n- `name`: The name of the product. Must be a string with a minimum of 3 characters.\n- `description`: A detailed description of the product. Must be a string with a maximum of 255 characters.\n- `price`: The price of the product. Must be a decimal number with up to two decimal places.\n- `category_id`: ID of the category the product belongs to. Must be an integer and must exist in the database.\n- `provider_id`: ID of the provider associated with the product. Must be an integer and must exist in the database.\n\nThe following fields are optional, but if included, must meet the specified validations:\n\n- `stock`: An integer indicating the available quantity of the product in stock.\n- `image`: A valid URL pointing to the product's image.\n- `has_discount`: A boolean field indicating whether the product has a discount. This field must always be true for outlet products.\n   To create a product without a discount, use the appropriate products endpoint.\n- `discount`: The discount applied to the product. If `has_discount` is true, this value must be greater than 0 and less than 100.\n\nValidation includes type constraints and specific value rules. If any field does not comply with the rules, an error will be returned.",
                "operationId": "d11b65ac7954125f05487fe45862fcff",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OutletCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product successfully created."
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 21
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/outlet/{id}": {
            "get": {
                "tags": [
                    "Outlet"
                ],
                "summary": "Get an outlet product by ID",
                "description": "Returns the data of a specific outlet product.\n\nThis is a public endpoint.\n\nIt searches for the product by its ID and checks if it belongs to the outlet.\nIf not found, it returns an error.",
                "operationId": "7029b3370902ee0537345e1fa4f65ce5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found or not belonging to the outlet",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Outlet"
                ],
                "summary": "Delete an outlet product",
                "description": "Deletes a product from the outlet by its ID.\n\nRequires authentication and administrator permissions.\n\nIf the product does not exist, it returns a 404 error.\nIf successfully deleted, it returns a 200 status code.",
                "operationId": "97899162908852e82c2655aedb3de42b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully deleted"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all products without discount",
                "description": "Returns a list of all products without a discount.\n\nThis endpoint is public.\n\nThis function retrieves all products without a discount from the\nProduct model and returns them in JSON format. Each product includes\nid, name, description, price, stock, image, has_discount, discount, provider_id, category_id, created_at, and updated_at.",
                "operationId": "d97d1c3727cbac49708b85f7d11f7d58",
                "responses": {
                    "200": {
                        "description": "List of products without discount (public endpoint, does not require authentication)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Creates a new product with the provided data.\n\nRequires authentication and administrator permissions.\n\nWhen creating a new product, the following fields are required:\n\n- `name`: The name of the product. Must be a string with a minimum of 3 characters.\n- `description`: A detailed description of the product. Must be a string with a maximum of 255 characters.\n- `price`: The price of the product. Must be a decimal number with up to two decimal places.\n- `category_id`: The ID of the category the product belongs to. Must be an integer and must exist in the database.\n- `provider_id`: The ID of the provider associated with the product. Must be an integer and must exist in the database.\n\nThe following fields are optional, but if included, must meet the specified validations:\n\n- `stock`: An integer indicating the available quantity of the product in stock.\n- `image`: A valid URL pointing to the product's image.\n- `has_discount`: A boolean field indicating whether the product has a discount. This field must always be false for standard products and true for outlet products.\n- `discount`: The discount applied to the product. If `has_discount` is false, this value must be 0.\n\nValidation includes type constraints and specific value rules. If any field does not comply with the rules, an error will be returned.",
                "operationId": "785644b7d7dd38af4b51dafd0fbc1b6d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product successfully created."
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 21
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "description": "REtrieves data about an especific product.\n\nThis is a public endpoint \n\nBusca el producto por su ID y comprueba que no pertenezca al outlet.\nSi no se encuentra, devuelve un error",
                "operationId": "c87fb2e4d617e7b36c712cad358acdb8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found or belonging to outlet",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "description": "Updates the data of an existing product, whether it is from the outlet or not.\n\nRequires authentication and administrator permissions.  \n\nAllows updating one or more fields of the product. \nReturns the updated product if everything is correct. \n\nAllows updating the `has_discount` field to a truthy value in order to move the product\nto the outlet endpoint.",
                "operationId": "416e4959a3919547eb609d87e3db9135",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product successfully updated"
                                        },
                                        "product": {
                                            "$ref": "#/components/schemas/ProductUpdate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Deletes a product",
                "description": "Elimina un producto que no pertenezca al outlet por su ID. \n\nRequiere autenticación y permisos de administrador.\n\nSi el producto no existe, devuelve un error 404. \nSi se elimina correctamente, devuelve un código 204.",
                "operationId": "b49ce9f3cb168b233245548fb4ef36d3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully deleted"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/providers": {
            "get": {
                "tags": [
                    "Providers"
                ],
                "summary": "Get all providers",
                "description": "Returns a list of all providers registered in the database.\n\nRequires authentication and administrator permissions.\n\nThis function retrieves all records from the Provider model and returns them in JSON format. Each provider includes a name and description.",
                "operationId": "d99e139f235d5222c74789c37512fc95",
                "responses": {
                    "200": {
                        "description": "Providers list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Provider"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Providers"
                ],
                "summary": "Create a new provider",
                "description": "Creates a new provider with the provided data.\n\nRequires authentication and administrator permissions.\n\nValidates required fields before storing the resource.\nThe \"description\" field is optional.\nReturns the ID of the created provider and a confirmation message if the operation is successful.",
                "operationId": "8d61f862240fcb54ca4379f8211c756f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderCreateSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Provider created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Provider created successfully"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/providers/{id}": {
            "get": {
                "tags": [
                    "Providers"
                ],
                "summary": "Get a provider by ID",
                "description": "Returns data for a specific provider.\n\nRequires authentication and administrator permissions.\n\nSearches for the provider by its ID. If not found, returns an error.",
                "operationId": "2e8a9bc6272603d6fc877d77d9472c78",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Provider ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provider details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Provider"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Providers"
                ],
                "summary": "Update a provider",
                "description": "Updates an existing provider's data.\n\nRequires authentication and administrator permissions.\n\nAllows you to update one or more provider fields.\nReturns the updated provider if everything is correct.",
                "operationId": "9f26750a48584c4e9d4a861e4d024d1c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Provider ID to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderUpdateSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Provider updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Provider updated successfully"
                                        },
                                        "provider": {
                                            "$ref": "#/components/schemas/Provider"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Providers"
                ],
                "summary": "Delete a provider",
                "description": "Deletes a provider by its ID.\n\nRequires authentication and administrator permissions.\n\nIf the provider does not exist, a 404 error is returned.\nIf deleted successfully, a 204 code is returned.",
                "operationId": "1aa03e6dae527bbdd64b73a803e0a142",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the provider to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provide successfully removed"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/reviews": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get all reviews",
                "description": "Returns a list of all reviews in the database.\n\nThis function fetches all records from the Review model and \nreturns them in JSON format.",
                "operationId": "72b70a0c4b8c3af58b7e8a6a8e659d77",
                "responses": {
                    "200": {
                        "description": "List of reviews",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Review"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Create a new review",
                "description": "Creates a new review with the provided data.\n\nRequires authentication.\n\nValidates the required fields before storing the resource.\nThe \"comment\" field is optional.\nReturns the ID of the created review and a confirmation message if successful.",
                "operationId": "f382dabdc7e71b67c93117f17f1fb255",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReviewCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Review successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review successfully created."
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/reviews/{id}": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get a review by its ID",
                "description": "Returns the details of a specific review.\n\nLooks up the review by its ID. If not found, returns an error.",
                "operationId": "1ebe1abb8f05e98c0059b25db9911ebe",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Review ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Review"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Update a review",
                "description": "Updates the data of an existing review.\n\nRequires authentication.\nThe review can only be updated if it was created by the authenticated user.\nAllows updating one or more fields of a review.\nReturns the updated review if successful.",
                "operationId": "47513391c5f4f9ee05b348e5d603d96b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the review to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReviewUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Review successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review successfully updated"
                                        },
                                        "review": {
                                            "$ref": "#/components/schemas/Review"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Delete a review",
                "description": "Deletes a review by its ID.\n\nRequires authentication.\n\nThe review can only be deleted if it was created by the authenticated user.\n\nIf the review does not exist, returns a 404 error.\nIf successfully deleted, returns a 200 status code.",
                "operationId": "3c59dee71ea9b81870ffa682d1ff2bae",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the review to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Review deleted"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "description": "Returns a list of all users registered in the database.\n\nRequires authentication and administrator permissions.\n\nThis function retrieves all records from the User model and returns them in JSON format. Each user includes a name, email, password, and role.",
                "operationId": "566aed8efb436ca506e0ef51a032ecd9",
                "responses": {
                    "200": {
                        "description": "User List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Creates a new user with the provided data.\n\nRequires authentication and administrator permissions.\n\nValidates required fields before storing the resource.\nThe \"role\" field is optional; if not specified, it will be \"user\".\nReturns the created user ID and a confirmation message if the operation is successful.",
                "operationId": "be551c1d694a01c164966f58bfa77013",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreateSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully created user."
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "description": "Returns data for a specific user.\n\nRequires authentication and administrator permissions.\n\nSearches for the user by ID. If not found, returns an error.",
                "operationId": "6f51bd5fa2dddcd25e44cfa53dcbd10a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "description": "Updates an existing user's data.\n\nRequires authentication and administrator permissions.\n\nAllows you to update one or more user fields.\nReturns the updated user if everything is correct.",
                "operationId": "070e37fc9aff78ae73860751bc990ed3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully updated user"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Deletes a user by their ID.\n\nRequires authentication and administrator permissions.\n\nIf the user doesn't exist, returns a 404 error.\nIf deleted successfully, returns a 204 code.",
                "operationId": "0b4133ed462528a5e648b88ead11e929",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted user"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "CreateOrderRequest": {
                "title": "Create Order Request",
                "required": [
                    "items"
                ],
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "required": [
                                "product_id",
                                "quantity"
                            ],
                            "properties": {
                                "product_id": {
                                    "type": "integer",
                                    "example": 2
                                },
                                "quantity": {
                                    "type": "integer",
                                    "example": 1
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "NotFoundError": {
                "title": "Resource not found",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Resource not found"
                    }
                },
                "type": "object"
            },
            "OrderDetails": {
                "title": "OrderDetails",
                "required": [
                    "order_id",
                    "product_id",
                    "quantity",
                    "unit_price"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 10
                    },
                    "order_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "quantity": {
                        "type": "integer",
                        "example": 3
                    },
                    "unit_price": {
                        "type": "number",
                        "format": "float",
                        "example": 49.99
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-21T10:30:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-21T10:30:00"
                    }
                },
                "type": "object"
            },
            "Order": {
                "title": "Order",
                "required": [
                    "user_id",
                    "status",
                    "total"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 3
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-21T10:30:00"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "sent",
                            "cancelled",
                            "delivered"
                        ],
                        "example": "pending"
                    },
                    "total": {
                        "type": "number",
                        "format": "float",
                        "example": 199.99
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-21T10:30:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-21T10:30:00"
                    },
                    "detalles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderDetails"
                        }
                    }
                },
                "type": "object"
            },
            "OutletCreate": {
                "required": [
                    "name",
                    "description",
                    "price",
                    "category_id",
                    "provider_id"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 3,
                        "example": "Sports T-shirt"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "High-performance technical t-shirt"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 29.99
                    },
                    "stock": {
                        "type": "integer",
                        "example": 100
                    },
                    "image": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://example.com/product.jpg"
                    },
                    "has_discount": {
                        "description": "Must be true or equivalent (accepted). The created product must have a discount",
                        "type": "boolean",
                        "enum": [
                            true
                        ],
                        "example": true
                    },
                    "discount": {
                        "description": "Must be a value greater than 0 and less than or equal to 100.",
                        "type": "number",
                        "example": 15
                    },
                    "category_id": {
                        "description": "Related category ID (foreign key to Category)",
                        "type": "integer",
                        "example": 1
                    },
                    "provider_id": {
                        "description": "Related provider ID (foreign key to Provider)",
                        "type": "integer",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "ProductCreate": {
                "required": [
                    "name",
                    "description",
                    "price",
                    "category_id",
                    "provider_id"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 3,
                        "example": "Sports T-shirt"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "High-performance technical t-shirt"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 29.99
                    },
                    "stock": {
                        "type": "integer",
                        "example": 100
                    },
                    "image": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://example.com/product.jpg"
                    },
                    "has_discount": {
                        "description": "Must be false or equivalent (declined). The created product must NOT have a discount initially.",
                        "type": "boolean",
                        "enum": [
                            false
                        ],
                        "example": false
                    },
                    "discount": {
                        "description": "Must be 0 if there is no discount.",
                        "type": "number",
                        "example": 0
                    },
                    "category_id": {
                        "description": "Related category ID (foreign key to Category)",
                        "type": "integer",
                        "example": 1
                    },
                    "provider_id": {
                        "description": "Related provider ID (foreign key to Provider)",
                        "type": "integer",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "Product": {
                "title": "Product",
                "required": [
                    "id",
                    "name",
                    "description",
                    "price",
                    "stock",
                    "image",
                    "has_discount",
                    "discount",
                    "provider_id",
                    "category_id",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Sports T-shirt"
                    },
                    "description": {
                        "type": "string",
                        "example": "High-performance technical t-shirt"
                    },
                    "price": {
                        "type": "number",
                        "example": 29.99
                    },
                    "stock": {
                        "type": "integer",
                        "example": 2
                    },
                    "image": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://www.example.com/images/tshirt.jpg"
                    },
                    "has_discount": {
                        "description": "Este campo debe ser siempre false. si se cambia a true el producto pasa al outlet",
                        "type": "boolean",
                        "default": 0,
                        "example": false
                    },
                    "discount": {
                        "description": "Si has_discount es falsy entonces discount debe ser 0",
                        "type": "number",
                        "example": 0
                    },
                    "provider_id": {
                        "description": "Related provider ID (foreign key a Provider)",
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "description": "Related category ID (foreign key a Category)",
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    }
                },
                "type": "object"
            },
            "ProductUpdate": {
                "title": "Actualización de Producto",
                "description": "Schema para actualizar un producto",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 3,
                        "example": "Sports T-shirt"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "confortable t-shirt for training"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 49.99
                    },
                    "stock": {
                        "type": "integer",
                        "example": 150
                    },
                    "image": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://example.com/images/product.png"
                    },
                    "has_discount": {
                        "type": "boolean",
                        "example": false
                    },
                    "discount": {
                        "type": "number",
                        "example": 0
                    },
                    "category_id": {
                        "description": "Related category ID (foreign key a Category)",
                        "type": "integer",
                        "example": 1
                    },
                    "provider_id": {
                        "description": "Related provider ID (foreign key a Provider)",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "ProviderCreateSchema": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Nombre Proveedor"
                    },
                    "description": {
                        "type": "string",
                        "example": "Descripción del nuevo proveedor"
                    }
                },
                "type": "object"
            },
            "Provider": {
                "title": "Provider",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Nombre Proveedor"
                    },
                    "description": {
                        "type": "string",
                        "example": "Descripción del nuevo proveedor"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    }
                },
                "type": "object"
            },
            "ProviderUpdateSchema": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Nombre Proveedor"
                    },
                    "description": {
                        "type": "string",
                        "example": "Descripción del nuevo proveedor"
                    }
                },
                "type": "object"
            },
            "ReviewCreate": {
                "required": [
                    "product_id",
                    "rating"
                ],
                "properties": {
                    "product_id": {
                        "description": "ID of the product the review refers to (foreign key to products)",
                        "type": "integer",
                        "example": 1
                    },
                    "comment": {
                        "type": "string",
                        "example": "The product is of good quality"
                    },
                    "rating": {
                        "type": "integer",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "Review": {
                "title": "Review",
                "required": [
                    "id",
                    "user_id",
                    "product_id",
                    "comment",
                    "rating"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "ID of the user who created the review (foreign key to users)",
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "ID of the product the review refers to (foreign key to products)",
                        "type": "integer",
                        "example": 1
                    },
                    "comment": {
                        "type": "string",
                        "example": "The product is of good quality"
                    },
                    "rating": {
                        "type": "integer",
                        "example": 5
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    }
                },
                "type": "object"
            },
            "ReviewUpdate": {
                "title": "Review",
                "properties": {
                    "product_id": {
                        "description": "ID of the product the review refers to (foreign key to products)",
                        "type": "integer",
                        "example": 1
                    },
                    "comment": {
                        "type": "string",
                        "example": "The product is of good quality"
                    },
                    "rating": {
                        "type": "integer",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "UpdateOrderStatusRequest": {
                "title": "Update Order Status Request",
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "sent",
                            "cancelled",
                            "delivered"
                        ],
                        "example": "sent"
                    }
                },
                "type": "object"
            },
            "UserCreateSchema": {
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Ignacio"
                    },
                    "email": {
                        "type": "string",
                        "example": "ejemplo@correo.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "password"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "admin"
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Ignacio"
                    },
                    "email": {
                        "type": "string",
                        "example": "ejemplo@correo.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "password"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "admin"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-05 21:45:59"
                    }
                },
                "type": "object"
            },
            "UserUpdateSchema": {
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Ignacio"
                    },
                    "email": {
                        "type": "string",
                        "example": "ejemplo@correo.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "password"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "user"
                        ],
                        "example": "admin"
                    }
                },
                "type": "object"
            },
            "ValidationError": {
                "title": "Error de validación",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid."
                    },
                    "errors": {
                        "properties": {
                            "error": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "Name is required"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "Orders",
            "description": "Orders"
        },
        {
            "name": "Outlet",
            "description": "Outlet"
        },
        {
            "name": "Products",
            "description": "Products"
        },
        {
            "name": "Providers",
            "description": "Providers"
        },
        {
            "name": "Reviews",
            "description": "Reviews"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ]
}